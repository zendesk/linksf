module.exports = function(grunt) {

  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),
    jshint: {
      files: [
        'js/app/**/*.js',
        'js/shims/**/*.js',
        'test/*.js'
      ],
      options: {
        globals: {
          console: true,
          module: true,
          require: true,
          navigator: true,
          Parse: true,
          document: true
        },
        undef: true,
        debug: true
      }
    },
    watch: {
      files: [
        'Gruntfile.js',
        '<%= jshint.files %>',
        'js/app/**/*.hbs',
        'css/**/*.scss',
        'test/**/*.js',
        'html/*.html',
        'vendor/**/*'
      ],
      tasks: ['default'],
    },
    simplemocha: {
      options: {
        timeout: 3000,
        ignoreLeaks: false,
        ui: 'bdd',
        reporter: 'list'
      },

      all: { src: ['test/**/*.js'] }
    },
    sass: {
      dist: {
        files: {
          'css/static/user.css': ['css/common.scss', 'vendor/css/icons.css', 'css/user/**/*.scss'],
          'css/static/admin.css':  ['css/common.scss', 'vendor/css/icons.css', 'css/admin/**/*.scss']
        }
      }
    },
    cachebuster: {
      index: { 
        files: [ 
          {
            src:  ['js/static/output.js', 'js/static/admin.js', 'css/static/user.css', 'css/static/admin.css'],
          }
        ],
        options: { 

          complete: function(hashes) { 
            // ugly but the only way to tag each file with a key
            var key_map = {
              'js/static/output.js': 'output_js',
              'js/static/admin.js': 'admin_js',
              'css/static/user.css': 'user_css',
              'css/static/admin.css': 'admin_css'
            };

            var context = {};
            var Handlebars = require('handlebars');

            Object.keys(hashes).forEach(function(key) { 
              var matches = key.match(/(.*)(\..*)$/);
              var outputFile = matches[1] + "-" + hashes[key] + matches[2];

              grunt.file.copy(key, outputFile);
              context[key_map[key]] = outputFile;
            });

            ["index.html", "admin.html"].forEach(function(file) { 
              var template = Handlebars.compile(grunt.file.read("html/" + file));
              var output = template(context);
              output = "<!-- THIS FILE IS AUTO-GENERATED BY GRUNT.  DO NOT EDIT. -->\n" + output;
              grunt.file.write(file, output);
            });
          }
        }
      }
    }
  });

  grunt.loadNpmTasks('grunt-contrib-jshint');
  grunt.loadNpmTasks('grunt-contrib-watch');
  grunt.loadNpmTasks('grunt-simple-mocha');
  grunt.loadNpmTasks('grunt-contrib-sass');
  grunt.loadNpmTasks('grunt-cachebuster');

  var browserifyThings = function(entryPoint, outputJS) {
    var browserify  = require('browserify'),
        shim        = require('browserify-shim'),
        done        = this.async();

    // this will be the js src'd in <script> tags
    var output;

    // vendor js
    output = shim(browserify(), {
      jquery: {
        path: './vendor/js/jquery.min.js',
        exports: '$'
      },
      'jquery-serialize-object': {
        path: './vendor/js/jquery.serialize-object.js',
        exports: null
      },
      bootstrap: {
        path: './vendor/bootstrap/js/bootstrap.min.js',
        exports: null,
        depends: { jquery: '$' }
      }
    })
      .require('./js/shims/parse.js', {expose: 'parse'})
      .require('./js/shims/google-maps.js', {expose: 'google-maps'})
      .require('backbone')
      .require('underscore')
      .require('./vendor/js/backbone_filters.js', {expose: 'backbone-filters'})
      .require('./vendor/js/fastclick.min.js', {expose: 'fastclick'});

    // use hbsfy transform to support requiring .hbs files
    output = output.transform('hbsfy');

    // shared modules.
    // note: these are modules shared between the client and the server
    [
      './js/app/lib/*.js',
      './js/app/models/*.js'
    ].forEach(function(modules) {
      require('glob')(modules, function(er, files) {
        files.forEach(function(file) {
          var name = file
            .replace('./js/app/','')
            .replace(/\.(js|hbs)$/,'');

          output = output.require(file, {expose: "cloud/" + name});
        });
      });
    });

    // application modules
    [
      './js/app/lib/*.js',
      './js/app/models/*.js',
      './js/app/collections/*.js',
      './js/app/routers/*.js',
      './js/app/views/*.js',
      './js/app/templates/*.hbs'
    ].forEach(function(modules) {
      require('glob')(modules, function(er, files) {
        files.forEach(function(file) {
          var name = file
            .replace('./js/app/','')
            .replace(/\.(js|hbs)$/,'');

          output = output.require(file, {expose: name});
        });
      });
    });

    output.require(entryPoint, { entry: true });

    // now bundle it all up!
    output.bundle(function (err, src) {
      if (err) return console.error(err);

      require('fs').writeFileSync(outputJS, src);

      // keep grunt alive until the write stream completes
      done();
    });
  };

  grunt.registerTask('browserify', 'Browserify and concatenate app sources', function() {
    browserifyThings.call(this, "./js/app/index.js", "./js/static/output.js")
  });

  grunt.registerTask('browserify:admin', 'Browserify and concatenate admin sources', function() {
    browserifyThings.call(this, "./js/app/admin.js", "./js/static/admin.js")
  });

  grunt.registerTask('default', [
    'jshint',
    'simplemocha',
    'sass',
    'browserify',
    'browserify:admin',
    'cachebuster'
  ]);
};
